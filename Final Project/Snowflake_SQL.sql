CREATE OR REPLACE RESOURCE MONITOR limiter
  WITH CREDIT_QUOTA = 400
  TRIGGERS ON 40 PERCENT DO NOTIFY
           ON 80 PERCENT DO SUSPEND
           ON 100 PERCENT DO SUSPEND_IMMEDIATE;

-- Creating integration with the S3 service
CREATE STORAGE INTEGRATION S3_int
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = 'S3'
  ENABLED = TRUE
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::533266996171:role/snoflake_role'
  STORAGE_ALLOWED_LOCATIONS = ('s3://sv-web-01/dataset/')
  -- [ STORAGE_BLOCKED_LOCATIONS = ('s3://<bucket>/<path>/', 's3://<bucket>/<path>/') ]

DESC INTEGRATION S3_int;

-- Creating of DB to operate with datasets 
CREATE DATABASE kaggle_dataset;

--Creating of CSV format file
CREATE FILE FORMAT my_csv_format
  TYPE = 'CSV'
  FIELD_OPTIONALLY_ENCLOSED_BY = '"'
  COMPRESSION = 'AUTO';

  -- Creating of Stage 
USE SCHEMA kaggle_dataset.public;
CREATE STAGE S3_stage_01
  STORAGE_INTEGRATION = S3_int
  URL = 's3://sv-web-01/dataset/'
  FILE_FORMAT = my_csv_format;

-- Creating the table with certain columns
CREATE TABLE kaggle_covid19 (
    iso_code      VARCHAR,
    continent     VARCHAR,
    location      VARCHAR,
    date          DATE,
    total_cases   FLOAT,
    new_cases     FLOAT,
    total_deaths  FLOAT,
    new_deaths    FLOAT
);

-- Copying and transforming of Kaggle's dataset
COPY INTO KAGGLE_COVID19 (iso_code, continent, location, date, total_cases, new_cases, total_deaths, new_deaths)
FROM @S3_stage_02
ON_ERROR = 'CONTINUE'
FILE_FORMAT = (FORMAT_NAME = 'my_csv_format');

--Changing of lengh of ISO3166_1 from 2 to 16777216
ALTER TABLE COVID19_EPIDEMIOLOGICAL_DATA.PUBLIC.ECDC_GLOBAL
MODIFY COLUMN ISO3166_1 VARCHAR(16777216);

-- Create a new table as a result of merging
CREATE TABLE IF NOT EXISTS covid19_MERGED_TABLE AS
SELECT *
FROM KAGGLE_DATASET.PUBLIC.ECDC_GLOBAL;

-- Merge operation to update and insert records into the new table
MERGE INTO covid19_MERGED_TABLE AS target
USING KAGGLE_DATASET.PUBLIC.KAGGLE_COVID19 AS source
ON target.DATE = source.dae AND target.ISO3166_1 = source.iso_code
WHEN MATCHED AND source.date >= '2020-12-15'
THEN UPDATE SET
    target.CASES = source.total_cases,
    target.CASES_SINCE_PREV_DAY = source.new_cases,
    target.CONTINENTEXP = source.continent,
    target.COUNTRY_REGION = source.location,
    target.DATE = source.date,
    target.DEATHS = source.total_deaths,
    target.DEATHS_SINCE_PREV_DAY = source.new_deaths
WHEN NOT MATCHED AND source.date >= '2020-12-15'
THEN INSERT (CASES, CASES_SINCE_PREV_DAY, CONTINENTEXP, COUNTRY_REGION, DATE, DEATHS, DEATHS_SINCE_PREV_DAY, ISO3166_1)
VALUES (source.total_cases, source.new_cases, source.continent, source.location, source.date, source.total_deaths, source.new_deaths, LEFT(source.iso_code, 3));

--Creating, formating and transforming vaccination table
CREATE OR REPLACE TABLE KAGGLE_DATASET.PUBLIC.OWID_VACCINATIONS AS
SELECT
    COUNTRY_REGION,
    ISO3166_1,
    SUM(PEOPLE_VACCINATED) AS PEOPLE_VACCINATED_WEEKLY,
    SUM(PEOPLE_FULLY_VACCINATED) AS PEOPLE_FULLY_VACCINATED_WEEKLY,
    SUM(DAILY_VACCINATIONS) AS WEEKLY_VACCINATIONS,
    MIN(DATE_TRUNC('week', DATE)) AS DATE
FROM COVID19_EPIDEMIOLOGICAL_DATA.PUBLIC.OWID_VACCINATIONS
WHERE DATE >= '2020-12-07'
GROUP BY COUNTRY_REGION, ISO3166_1, DATE_TRUNC('week', DATE);

--Creating and transform of weekly cases table 
CREATE OR REPLACE TABLE KAGGLE_DATASET.PUBLIC.vacc_MERGED_TABLE AS
SELECT
    COUNTRY_REGION,
    CONTINENTEXP,
    ISO3166_1,
    CASES_WEEKLY,
    DEATHS_WEEKLY,
    DATE
FROM COVID19_EPIDEMIOLOGICAL_DATA.PUBLIC.ECDC_GLOBAL_WEEKLY;

--Merging of two previous tables
CREATE OR REPLACE TABLE KAGGLE_DATASET.PUBLIC.MERGED_RESULT AS
SELECT
    VM.*,
    OV.PEOPLE_FULLY_VACCINATED_WEEKLY,
    OV.PEOPLE_VACCINATED_WEEKLY,
    OV.WEEKLY_VACCINATIONS
FROM KAGGLE_DATASET.PUBLIC.VACC_MERGED_TABLE VM
LEFT JOIN KAGGLE_DATASET.PUBLIC.OWID_VACCINATIONS OV
ON VM.DATE = OV.DATE AND VM.ISO3166_1 = OV.ISO3166_1
WHERE VM.DATE <= '2023-11-20';

--Changing of values type
ALTER TABLE KAGGLE_DATASET.PUBLIC.MERGED_RESULT
ADD COLUMN DEATHS_PER_1000CASES_RATIO NUMBER(10,1);

ALTER TABLE KAGGLE_DATASET.PUBLIC.MERGED_RESULT
RENAME COLUMN CASES_DEATH_RATIO TO DEATHS_PER_1000CASES_RATIO;

-- Getting death/cases per 1000 ppl ratio
UPDATE KAGGLE_DATASET.PUBLIC.MERGED_RESULT
SET DEATHS_PER_1000CASES_RATIO = CASE 
    WHEN CASES_WEEKLY = 0 THEN NULL -- to handle division by zero
    ELSE (DEATHS_WEEKLY / CASES_WEEKLY)*1000
END;

-- Add new columns
ALTER TABLE KAGGLE_DATASET.PUBLIC.MERGED_RESULT
ADD COLUMN WEEKLY_VAC_per1000 NUMBER(20,1);
ALTER TABLE KAGGLE_DATASET.PUBLIC.MERGED_RESULT
ADD COLUMN PEOPLE_FULLY_VAC_WEEKLY_per1000 NUMBER(20,1);
ALTER TABLE KAGGLE_DATASET.PUBLIC.MERGED_RESULT
ADD COLUMN PEOPLE_VAC_WEEKLY_per1000 NUMBER(20,1);

-- Update values in new columns
UPDATE KAGGLE_DATASET.PUBLIC.MERGED_RESULT
SET 
    WEEKLY_VAC_per1000 = WEEKLY_VACCINATIONS / 1000,
    PEOPLE_FULLY_VAC_WEEKLY_per1000 = PEOPLE_FULLY_VACCINATED_WEEKLY / 1000,
    PEOPLE_VAC_WEEKLY_per1000 = PEOPLE_VACCINATED_WEEKLY / 1000;